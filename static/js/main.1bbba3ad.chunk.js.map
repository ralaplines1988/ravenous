{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","e","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","console","log","renderSortByOptions","placeholder","onChange","Yelp","fetch","headers","Authorization","response","json","jsonResponse","image_url","address1","zip_code","categories","title","App","then","toUpperCase","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bbba3ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n/*const business = {\r\n    imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n    name: 'MarginOtto Pizzeria',\r\n    address: '1010 Paddington Way',\r\n    city: 'Flavortown',\r\n    state: 'NY',\r\n    zipCode: '10101',\r\n    category: 'Italian',\r\n    rating: 4.5,\r\n    reviewCount: 90\r\n};*/\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n                    </div>   \r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\r\n                        <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"BusinessList\">\r\n            {\r\n            this.props.businesses.map(business => {\r\n                return <Business key={business.id} business={business} />\r\n            })\r\n            }\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n/*const sortByOptions = {\r\n    \"Best Match\": \"best_match\",\r\n    \"Highest Rated\": \"rating\",\r\n    \"Most Reviewed\": \"review_count\"\r\n};*/\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\"\r\n        };\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption){\r\n        if(this.state.sortBy === sortByOption){\r\n            return 'active';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    handleSortByChange(sortByOption){\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({\r\n            term: e.target.value\r\n        })\r\n    }\r\n\r\n    handleLocationChange(e){\r\n        this.setState({\r\n            location: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSearch(e){\r\n        this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy);\r\n        e.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n        return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this,sortByOptionValue)}>{sortByOption}</li>\r\n        });\r\n    }\r\n\r\n    test() {\r\n        console.log(this);\r\n        return 'red';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n                <ul>\r\n                    {this.renderSortByOptions()}\r\n                </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n                <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/>\r\n                <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n                <a onClick={this.handleSearch}>Let's Go</a>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchBar;","const apikey = '8jKUsPrONABdEhNOsUmDQGHuuB-M9tegTD6SoOOEncqb70HQAKM2eeoFC63A92wLHCdDRhPW7wFNqTZ-Hor4y-OQFw-JqrnoxGxlQLgHJDDo4ZEH7oashWosZD1OXnYx';\r\n\r\nexport const Yelp = {\r\n    async search(term, location, sortBy) {\r\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apikey}`\r\n            }\r\n        });\r\n        const jsonResponse = await response.json();\r\n        if (jsonResponse.businesses) {\r\n            return jsonResponse.businesses.map(business => {\r\n                return {\r\n                    id: business.id,\r\n                    imageSrc: business.image_url,\r\n                    name: business.name,\r\n                    address: business.location.address1,\r\n                    city: business.location.city,\r\n                    state: business.location.state,\r\n                    zipCode: business.location.zip_code,\r\n                    category: business.categories[0].title,\r\n                    rating: business.rating,\r\n                    reviewCount: business.rating\r\n                };\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/*export const Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apikey}`\r\n            }\r\n        })\r\n        .then(response =>{\r\n            return response.json();\r\n        })\r\n        .then(jsonResponse =>{\r\n            if(jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business =>{\r\n                    return {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.rating\r\n                    };\r\n                });\r\n            }\r\n        });\r\n    }\r\n}*/","import React from 'react';\n//import logo from '../../logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport {Yelp} from '../../util/Yelp';\n\n/*function App() {\n  return <h1>Hello</h1>\n}*/\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy){\n    Yelp.search(term, location, sortBy).then(businesses=>{\n      this.setState({\n        businesses: businesses\n      })\n    });\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <h1 className=\"app-title\">{'ravenous'.toUpperCase()}</h1>\n      <SearchBar searchYelp={this.searchYelp}/>\n    <BusinessList businesses={this.state.businesses} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}